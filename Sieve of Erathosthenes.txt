// Sieve of Erathosthenes
public class Seive {
    public static void main(String[] args) {
        int n = 40;
        boolean[] primes = new boolean[n+1];
        sieve(n, primes);
    }

    // false in array means number is prime
    static void sieve(int n, boolean[] primes) {
        for (int i = 2; i*i <= n; i++) {
            if (!primes[i]) {
                for (int j = i*2; j <= n; j+=i) {
                    primes[j] = true;
                }
            }
        }

        for (int i = 2; i <= n; i++) {
            if (!primes[i]) {
                System.out.print(i + " ");
            }
        }
    }
}


// leetcode 
lass Solution {
    int SOE(int n,boolean[] primes){
        int count = 0;
        for(int i =2; i * i <= n; i++){
            if(primes[i] == false){
                for(int j = i*i; j < n; j+= i){
                    primes[j] = true;
                }
            }
        }
        for(int i = 2; i < n ; i++){
            if(primes[i] == false) count++;
        }
        return count;
    }

    public int countPrimes(int n) {
        if(n <  2) return  0;
        boolean[] primes = new boolean[n];
        return SOE(n,primes);
    }
}